{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\otero\\\\OneDrive\\\\Escritorio\\\\Paginas Web\\\\ri cars automotores\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/supabaseService';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userRole, setUserRole] = useState('usuario');\n  const [loading, setLoading] = useState(true);\n\n  // Registro de usuario\n  async function signup(email, password, displayName) {\n    try {\n      const result = await authService.signUp(email, password, displayName);\n      toast.success('Cuenta creada exitosamente. Revisa tu email para confirmar.');\n      return result;\n    } catch (error) {\n      console.error('Error en registro:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Login\n  async function login(email, password) {\n    try {\n      const result = await authService.signIn(email, password);\n      toast.success('Inicio de sesión exitoso');\n      return result;\n    } catch (error) {\n      console.error('Error en login:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Logout\n  async function logout() {\n    try {\n      await authService.signOut();\n      toast.success('Sesión cerrada');\n    } catch (error) {\n      console.error('Error en logout:', error);\n      toast.error('Error al cerrar sesión');\n    }\n  }\n\n  // Recuperar contraseña\n  async function resetPassword(email) {\n    try {\n      await authService.resetPassword(email);\n      toast.success('Email de recuperación enviado');\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Verificar si es admin\n  function isAdmin() {\n    return userRole === 'admin';\n  }\n\n  // Verificar si es cliente\n  function isClient() {\n    return userRole === 'cliente' || userRole === 'admin';\n  }\n\n  // Obtener mensaje de error en español\n  function getErrorMessage(errorMessage) {\n    const errorMessages = {\n      'Usuario no encontrado': 'No existe una cuenta con este email',\n      'Contraseña incorrecta': 'Contraseña incorrecta',\n      'El usuario ya existe': 'Este email ya está registrado',\n      'Email inválido': 'Email inválido',\n      'Demasiados intentos': 'Demasiados intentos. Intenta más tarde',\n      'Cuenta deshabilitada': 'Esta cuenta ha sido deshabilitada',\n      'Operación no permitida': 'Operación no permitida',\n      'Credenciales inválidas': 'Credenciales inválidas'\n    };\n    return errorMessages[errorMessage] || errorMessage || 'Error desconocido';\n  }\n\n  // Verificar sesión y escuchar cambios de autenticación\n  useEffect(() => {\n    // Obtener sesión inicial\n    const getInitialSession = async () => {\n      try {\n        console.log('🔍 Verificando sesión inicial...');\n        const session = await authService.getSession();\n        console.log('📱 Sesión obtenida:', session);\n        if (session !== null && session !== void 0 && session.user) {\n          setCurrentUser(session.user);\n          console.log('👤 Usuario encontrado, obteniendo perfil...');\n          // Obtener perfil del usuario\n          const profile = await authService.getUserProfile(session.user.id);\n          console.log('📋 Perfil obtenido:', profile);\n          setUserRole((profile === null || profile === void 0 ? void 0 : profile.role) || 'cliente');\n        } else {\n          console.log('❌ No hay sesión activa');\n        }\n      } catch (error) {\n        console.error('❌ Error obteniendo sesión:', error);\n      } finally {\n        console.log('✅ Carga de autenticación completada');\n        setLoading(false);\n      }\n    };\n    getInitialSession();\n\n    // Escuchar cambios de autenticación\n    const {\n      data: {\n        subscription\n      }\n    } = authService.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session !== null && session !== void 0 && session.user) {\n        setCurrentUser(session.user);\n        try {\n          const profile = await authService.getUserProfile(session.user.id);\n          setUserRole((profile === null || profile === void 0 ? void 0 : profile.role) || 'cliente');\n        } catch (error) {\n          console.error('Error obteniendo perfil:', error);\n          setUserRole('cliente');\n        }\n      } else if (event === 'SIGNED_OUT') {\n        setCurrentUser(null);\n        setUserRole('usuario');\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const value = {\n    currentUser,\n    userRole,\n    signup,\n    login,\n    logout,\n    resetPassword,\n    isAdmin,\n    isClient,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"qwhTs8Lzp/32l/gwfkxB8/GMLCY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","userRole","setUserRole","loading","setLoading","signup","email","password","displayName","result","signUp","success","error","console","getErrorMessage","message","login","signIn","logout","signOut","resetPassword","isAdmin","isClient","errorMessage","errorMessages","getInitialSession","log","session","getSession","user","profile","getUserProfile","id","role","data","subscription","onAuthStateChange","event","unsubscribe","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/otero/OneDrive/Escritorio/Paginas Web/ri cars automotores/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authService } from '../services/supabaseService';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userRole, setUserRole] = useState('usuario');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Registro de usuario\r\n  async function signup(email, password, displayName) {\r\n    try {\r\n      const result = await authService.signUp(email, password, displayName);\r\n      \r\n      toast.success('Cuenta creada exitosamente. Revisa tu email para confirmar.');\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error en registro:', error);\r\n      toast.error(getErrorMessage(error.message));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Login\r\n  async function login(email, password) {\r\n    try {\r\n      const result = await authService.signIn(email, password);\r\n      \r\n      toast.success('Inicio de sesión exitoso');\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error en login:', error);\r\n      toast.error(getErrorMessage(error.message));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Logout\r\n  async function logout() {\r\n    try {\r\n      await authService.signOut();\r\n      toast.success('Sesión cerrada');\r\n    } catch (error) {\r\n      console.error('Error en logout:', error);\r\n      toast.error('Error al cerrar sesión');\r\n    }\r\n  }\r\n\r\n  // Recuperar contraseña\r\n  async function resetPassword(email) {\r\n    try {\r\n      await authService.resetPassword(email);\r\n      toast.success('Email de recuperación enviado');\r\n    } catch (error) {\r\n      console.error('Error en reset password:', error);\r\n      toast.error(getErrorMessage(error.message));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Verificar si es admin\r\n  function isAdmin() {\r\n    return userRole === 'admin';\r\n  }\r\n\r\n  // Verificar si es cliente\r\n  function isClient() {\r\n    return userRole === 'cliente' || userRole === 'admin';\r\n  }\r\n\r\n  // Obtener mensaje de error en español\r\n  function getErrorMessage(errorMessage) {\r\n    const errorMessages = {\r\n      'Usuario no encontrado': 'No existe una cuenta con este email',\r\n      'Contraseña incorrecta': 'Contraseña incorrecta',\r\n      'El usuario ya existe': 'Este email ya está registrado',\r\n      'Email inválido': 'Email inválido',\r\n      'Demasiados intentos': 'Demasiados intentos. Intenta más tarde',\r\n      'Cuenta deshabilitada': 'Esta cuenta ha sido deshabilitada',\r\n      'Operación no permitida': 'Operación no permitida',\r\n      'Credenciales inválidas': 'Credenciales inválidas'\r\n    };\r\n    return errorMessages[errorMessage] || errorMessage || 'Error desconocido';\r\n  }\r\n\r\n  // Verificar sesión y escuchar cambios de autenticación\r\n  useEffect(() => {\r\n    // Obtener sesión inicial\r\n    const getInitialSession = async () => {\r\n      try {\r\n        console.log('🔍 Verificando sesión inicial...');\r\n        const session = await authService.getSession();\r\n        console.log('📱 Sesión obtenida:', session);\r\n        \r\n        if (session?.user) {\r\n          setCurrentUser(session.user);\r\n          console.log('👤 Usuario encontrado, obteniendo perfil...');\r\n          // Obtener perfil del usuario\r\n          const profile = await authService.getUserProfile(session.user.id);\r\n          console.log('📋 Perfil obtenido:', profile);\r\n          setUserRole(profile?.role || 'cliente');\r\n        } else {\r\n          console.log('❌ No hay sesión activa');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error obteniendo sesión:', error);\r\n      } finally {\r\n        console.log('✅ Carga de autenticación completada');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getInitialSession();\r\n\r\n    // Escuchar cambios de autenticación\r\n    const { data: { subscription } } = authService.onAuthStateChange(async (event, session) => {\r\n      if (event === 'SIGNED_IN' && session?.user) {\r\n        setCurrentUser(session.user);\r\n        try {\r\n          const profile = await authService.getUserProfile(session.user.id);\r\n          setUserRole(profile?.role || 'cliente');\r\n        } catch (error) {\r\n          console.error('Error obteniendo perfil:', error);\r\n          setUserRole('cliente');\r\n        }\r\n      } else if (event === 'SIGNED_OUT') {\r\n        setCurrentUser(null);\r\n        setUserRole('usuario');\r\n      }\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    userRole,\r\n    signup,\r\n    login,\r\n    logout,\r\n    resetPassword,\r\n    isAdmin,\r\n    isClient,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
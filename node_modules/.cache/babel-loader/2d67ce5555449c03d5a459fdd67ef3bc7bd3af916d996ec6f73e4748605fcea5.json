{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\otero\\\\OneDrive\\\\Escritorio\\\\Paginas Web\\\\ri cars automotores\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/supabaseService';\nimport { supabase } from '../supabase/config';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userRole, setUserRole] = useState('usuario');\n  const [loading, setLoading] = useState(true);\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n\n  // Registro de usuario\n  async function signup(email, password, displayName) {\n    try {\n      const result = await authService.signUp(email, password, displayName);\n      toast.success('Cuenta creada exitosamente. Revisa tu email para confirmar.');\n      return result;\n    } catch (error) {\n      console.error('Error en registro:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Login\n  async function login(email, password) {\n    try {\n      const result = await authService.signIn(email, password);\n      toast.success('Inicio de sesión exitoso');\n      return result;\n    } catch (error) {\n      console.error('Error en login:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Logout\n  async function logout() {\n    if (isLoggingOut) {\n      console.log('🔄 Logout ya en progreso, ignorando...');\n      return;\n    }\n    try {\n      setIsLoggingOut(true);\n      console.log('🚪 AuthContext: Iniciando logout...');\n      await authService.signOut();\n      console.log('✅ AuthContext: Logout exitoso');\n      toast.success('Sesión cerrada');\n    } catch (error) {\n      console.error('❌ Error en logout:', error);\n      toast.error('Error al cerrar sesión');\n    } finally {\n      setIsLoggingOut(false);\n    }\n  }\n\n  // Recuperar contraseña\n  async function resetPassword(email) {\n    try {\n      await authService.resetPassword(email);\n      toast.success('Email de recuperación enviado');\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Verificar si es owner (dueño) - simplificado\n  async function isOwner() {\n    if (!currentUser) {\n      console.log('🔍 isOwner: No hay usuario autenticado');\n      return false;\n    }\n\n    // Forzar owner para tu email específico\n    if (currentUser.email === 'oterov101@gmail.com') {\n      console.log('👑 OWNER FORZADO en isOwner() para oterov101@gmail.com');\n      return true;\n    }\n\n    // Para otros usuarios, verificar desde userRole\n    const isOwnerResult = userRole === 'owner';\n    console.log('🔍 Verificación owner desde userRole:', {\n      email: currentUser.email,\n      userRole,\n      isOwner: isOwnerResult\n    });\n    return isOwnerResult;\n  }\n\n  // Verificar si es admin\n  function isAdmin() {\n    console.log('🔍 Verificando rol admin:', {\n      userRole,\n      currentUser: currentUser === null || currentUser === void 0 ? void 0 : currentUser.email,\n      result: userRole === 'admin' || userRole === 'owner'\n    });\n    return userRole === 'admin' || userRole === 'owner';\n  }\n\n  // Verificar si es cliente\n  function isClient() {\n    return userRole === 'cliente' || userRole === 'admin' || userRole === 'owner';\n  }\n\n  // Obtener mensaje de error en español\n  function getErrorMessage(errorMessage) {\n    const errorMessages = {\n      'Usuario no encontrado': 'No existe una cuenta con este email',\n      'Contraseña incorrecta': 'Contraseña incorrecta',\n      'El usuario ya existe': 'Este email ya está registrado',\n      'Email inválido': 'Email inválido',\n      'Demasiados intentos': 'Demasiados intentos. Intenta más tarde',\n      'Cuenta deshabilitada': 'Esta cuenta ha sido deshabilitada',\n      'Operación no permitida': 'Operación no permitida',\n      'Credenciales inválidas': 'Credenciales inválidas'\n    };\n    return errorMessages[errorMessage] || errorMessage || 'Error desconocido';\n  }\n\n  // Verificar sesión y escuchar cambios de autenticación\n  useEffect(() => {\n    // Obtener sesión inicial\n    const getInitialSession = async () => {\n      try {\n        const session = await authService.getSession();\n        if (session !== null && session !== void 0 && session.user) {\n          setCurrentUser(session.user);\n          console.log('👤 Usuario autenticado:', session.user.email);\n\n          // Forzar owner (dueño) directamente para tu email\n          if (session.user.email === 'oterov101@gmail.com') {\n            setUserRole('owner');\n            console.log('👑 OWNER FORZADO para oterov101@gmail.com');\n            return;\n          }\n\n          // Obtener rol desde la base de datos para otros usuarios\n          try {\n            const {\n              data: profile,\n              error\n            } = await authService.getUserProfile(session.user.id);\n            if (error) {\n              console.warn('⚠️ No se pudo obtener perfil, usando rol cliente por defecto');\n              setUserRole('cliente');\n            } else {\n              console.log('✅ Rol obtenido desde DB:', profile.role);\n              setUserRole(profile.role || 'cliente');\n            }\n          } catch (profileError) {\n            console.warn('⚠️ Error obteniendo perfil, usando rol cliente por defecto:', profileError);\n            setUserRole('cliente');\n          }\n        }\n      } catch (error) {\n        console.error('❌ Error obteniendo sesión:', error);\n      } finally {\n        console.log('✅ Carga de autenticación completada');\n        setLoading(false);\n      }\n    };\n    getInitialSession();\n\n    // Timeout de seguridad\n    const timeoutId = setTimeout(() => {\n      console.log('⏰ Timeout de autenticación - forzando carga');\n      setLoading(false);\n    }, 1500);\n\n    // Escuchar cambios de autenticación\n    const {\n      data: {\n        subscription\n      }\n    } = authService.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session !== null && session !== void 0 && session.user) {\n        setCurrentUser(session.user);\n\n        // Forzar owner (dueño) directamente para tu email\n        if (session.user.email === 'oterov101@gmail.com') {\n          setUserRole('owner');\n          console.log('👑 OWNER FORZADO en onChange para oterov101@gmail.com');\n          return;\n        }\n\n        // Obtener rol desde la base de datos para otros usuarios\n        try {\n          const profile = await authService.getUserProfile(session.user.id);\n          console.log('✅ Rol obtenido desde DB en onChange:', profile.role);\n          setUserRole(profile.role || 'cliente');\n        } catch (profileError) {\n          console.warn('⚠️ Error obteniendo perfil en onChange, usando rol cliente por defecto:', profileError);\n          setUserRole('cliente');\n        }\n      } else if (event === 'SIGNED_OUT') {\n        console.log('🔓 SIGNED_OUT detectado, limpiando estado...');\n        setCurrentUser(null);\n        setUserRole('usuario');\n        setIsLoggingOut(false);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n      clearTimeout(timeoutId);\n    };\n  }, []);\n  const value = {\n    currentUser,\n    userRole,\n    signup,\n    login,\n    logout,\n    resetPassword,\n    isOwner,\n    isAdmin,\n    isClient,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"evfRPWWFQhiaEMWelFArULVEiJo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","supabase","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","userRole","setUserRole","loading","setLoading","isLoggingOut","setIsLoggingOut","signup","email","password","displayName","result","signUp","success","error","console","getErrorMessage","message","login","signIn","logout","log","signOut","resetPassword","isOwner","isOwnerResult","isAdmin","isClient","errorMessage","errorMessages","getInitialSession","session","getSession","user","data","profile","getUserProfile","id","warn","role","profileError","timeoutId","setTimeout","subscription","onAuthStateChange","event","unsubscribe","clearTimeout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/otero/OneDrive/Escritorio/Paginas Web/ri cars automotores/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/supabaseService';\nimport { supabase } from '../supabase/config';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userRole, setUserRole] = useState('usuario');\n  const [loading, setLoading] = useState(true);\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n\n  // Registro de usuario\n  async function signup(email, password, displayName) {\n    try {\n      const result = await authService.signUp(email, password, displayName);\n      \n      toast.success('Cuenta creada exitosamente. Revisa tu email para confirmar.');\n      return result;\n    } catch (error) {\n      console.error('Error en registro:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Login\n  async function login(email, password) {\n    try {\n      const result = await authService.signIn(email, password);\n      \n      toast.success('Inicio de sesión exitoso');\n      return result;\n    } catch (error) {\n      console.error('Error en login:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Logout\n  async function logout() {\n    if (isLoggingOut) {\n      console.log('🔄 Logout ya en progreso, ignorando...');\n      return;\n    }\n\n    try {\n      setIsLoggingOut(true);\n      console.log('🚪 AuthContext: Iniciando logout...');\n      \n      await authService.signOut();\n      \n      console.log('✅ AuthContext: Logout exitoso');\n      toast.success('Sesión cerrada');\n      \n    } catch (error) {\n      console.error('❌ Error en logout:', error);\n      toast.error('Error al cerrar sesión');\n    } finally {\n      setIsLoggingOut(false);\n    }\n  }\n\n  // Recuperar contraseña\n  async function resetPassword(email) {\n    try {\n      await authService.resetPassword(email);\n      toast.success('Email de recuperación enviado');\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      toast.error(getErrorMessage(error.message));\n      throw error;\n    }\n  }\n\n  // Verificar si es owner (dueño) - simplificado\n  async function isOwner() {\n    if (!currentUser) {\n      console.log('🔍 isOwner: No hay usuario autenticado');\n      return false;\n    }\n\n    // Forzar owner para tu email específico\n    if (currentUser.email === 'oterov101@gmail.com') {\n      console.log('👑 OWNER FORZADO en isOwner() para oterov101@gmail.com');\n      return true;\n    }\n\n    // Para otros usuarios, verificar desde userRole\n    const isOwnerResult = userRole === 'owner';\n    console.log('🔍 Verificación owner desde userRole:', {\n      email: currentUser.email,\n      userRole,\n      isOwner: isOwnerResult\n    });\n\n    return isOwnerResult;\n  }\n\n  // Verificar si es admin\n  function isAdmin() {\n    console.log('🔍 Verificando rol admin:', { \n      userRole, \n      currentUser: currentUser?.email,\n      result: userRole === 'admin' || userRole === 'owner'\n    });\n    return userRole === 'admin' || userRole === 'owner';\n  }\n\n  // Verificar si es cliente\n  function isClient() {\n    return userRole === 'cliente' || userRole === 'admin' || userRole === 'owner';\n  }\n\n  // Obtener mensaje de error en español\n  function getErrorMessage(errorMessage) {\n    const errorMessages = {\n      'Usuario no encontrado': 'No existe una cuenta con este email',\n      'Contraseña incorrecta': 'Contraseña incorrecta',\n      'El usuario ya existe': 'Este email ya está registrado',\n      'Email inválido': 'Email inválido',\n      'Demasiados intentos': 'Demasiados intentos. Intenta más tarde',\n      'Cuenta deshabilitada': 'Esta cuenta ha sido deshabilitada',\n      'Operación no permitida': 'Operación no permitida',\n      'Credenciales inválidas': 'Credenciales inválidas'\n    };\n    return errorMessages[errorMessage] || errorMessage || 'Error desconocido';\n  }\n\n  // Verificar sesión y escuchar cambios de autenticación\n  useEffect(() => {\n    // Obtener sesión inicial\n    const getInitialSession = async () => {\n      try {\n        const session = await authService.getSession();\n        \n        if (session?.user) {\n          setCurrentUser(session.user);\n          console.log('👤 Usuario autenticado:', session.user.email);\n          \n          // Forzar owner (dueño) directamente para tu email\n          if (session.user.email === 'oterov101@gmail.com') {\n            setUserRole('owner');\n            console.log('👑 OWNER FORZADO para oterov101@gmail.com');\n            return;\n          }\n          \n          // Obtener rol desde la base de datos para otros usuarios\n          try {\n            const { data: profile, error } = await authService.getUserProfile(session.user.id);\n            if (error) {\n              console.warn('⚠️ No se pudo obtener perfil, usando rol cliente por defecto');\n              setUserRole('cliente');\n            } else {\n              console.log('✅ Rol obtenido desde DB:', profile.role);\n              setUserRole(profile.role || 'cliente');\n            }\n          } catch (profileError) {\n            console.warn('⚠️ Error obteniendo perfil, usando rol cliente por defecto:', profileError);\n            setUserRole('cliente');\n          }\n        }\n      } catch (error) {\n        console.error('❌ Error obteniendo sesión:', error);\n      } finally {\n        console.log('✅ Carga de autenticación completada');\n        setLoading(false);\n      }\n    };\n\n    getInitialSession();\n\n    // Timeout de seguridad\n    const timeoutId = setTimeout(() => {\n      console.log('⏰ Timeout de autenticación - forzando carga');\n      setLoading(false);\n    }, 1500);\n\n    // Escuchar cambios de autenticación\n    const { data: { subscription } } = authService.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session?.user) {\n        setCurrentUser(session.user);\n        \n        // Forzar owner (dueño) directamente para tu email\n        if (session.user.email === 'oterov101@gmail.com') {\n          setUserRole('owner');\n          console.log('👑 OWNER FORZADO en onChange para oterov101@gmail.com');\n          return;\n        }\n        \n        // Obtener rol desde la base de datos para otros usuarios\n        try {\n          const profile = await authService.getUserProfile(session.user.id);\n          console.log('✅ Rol obtenido desde DB en onChange:', profile.role);\n          setUserRole(profile.role || 'cliente');\n        } catch (profileError) {\n          console.warn('⚠️ Error obteniendo perfil en onChange, usando rol cliente por defecto:', profileError);\n          setUserRole('cliente');\n        }\n      } else if (event === 'SIGNED_OUT') {\n        console.log('🔓 SIGNED_OUT detectado, limpiando estado...');\n        setCurrentUser(null);\n        setUserRole('usuario');\n        setIsLoggingOut(false);\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  const value = {\n    currentUser,\n    userRole,\n    signup,\n    login,\n    logout,\n    resetPassword,\n    isOwner,\n    isAdmin,\n    isClient,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
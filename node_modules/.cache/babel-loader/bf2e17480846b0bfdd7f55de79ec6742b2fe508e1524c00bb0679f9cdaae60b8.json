{"ast":null,"code":"import { supabase } from '../supabase/config';\n\n// Servicio para manejar favoritos y vehículos vistos recientemente\n\nexport const addToFavorites = async vehicleId => {\n  try {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('favorites').insert({\n      user_id: user.id,\n      vehicle_id: vehicleId\n    }).select().single();\n    if (error) {\n      if (error.code === '23505') {\n        // Ya existe en favoritos\n        return {\n          success: true,\n          message: 'Ya está en favoritos'\n        };\n      }\n      throw error;\n    }\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    console.error('Error agregando a favoritos:', error);\n    throw error;\n  }\n};\nexport const removeFromFavorites = async vehicleId => {\n  try {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    const {\n      error\n    } = await supabase.from('favorites').delete().eq('user_id', user.id).eq('vehicle_id', vehicleId);\n    if (error) throw error;\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error removiendo de favoritos:', error);\n    throw error;\n  }\n};\nexport const getFavorites = async () => {\n  try {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      return [];\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('favorites').select(`\n        *,\n        vehicles (\n          id,\n          brand,\n          model,\n          year,\n          price,\n          price_ars,\n          kilometers,\n          images,\n          condition,\n          transmission,\n          fuel_type,\n          color,\n          type,\n          location,\n          engine,\n          power,\n          features,\n          is_featured,\n          is_promotion\n        )\n      `).eq('user_id', user.id).order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data.map(item => ({\n      ...item.vehicles,\n      favorite_id: item.id,\n      favorited_at: item.created_at\n    }));\n  } catch (error) {\n    console.error('Error obteniendo favoritos:', error);\n    return [];\n  }\n};\nexport const isFavorite = async vehicleId => {\n  try {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      return false;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('favorites').select('id').eq('user_id', user.id).eq('vehicle_id', vehicleId).single();\n    if (error && error.code !== 'PGRST116') {\n      throw error;\n    }\n    return !!data;\n  } catch (error) {\n    console.error('Error verificando favorito:', error);\n    return false;\n  }\n};\nexport const addToRecentlyViewed = async vehicleId => {\n  try {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      // Si no hay usuario autenticado, guardar en localStorage\n      const recentlyViewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]');\n      const vehicle = recentlyViewed.find(v => v.id === vehicleId);\n      if (!vehicle) {\n        // Necesitamos obtener los datos del vehículo\n        const {\n          data: vehicleData\n        } = await supabase.from('vehicles').select('*').eq('id', vehicleId).single();\n        if (vehicleData) {\n          const updatedRecentlyViewed = [vehicleData, ...recentlyViewed.filter(v => v.id !== vehicleId)].slice(0, 10); // Mantener solo los últimos 10\n\n          localStorage.setItem('recentlyViewed', JSON.stringify(updatedRecentlyViewed));\n        }\n      }\n      return {\n        success: true\n      };\n    }\n    const {\n      error\n    } = await supabase.from('recently_viewed').insert({\n      user_id: user.id,\n      vehicle_id: vehicleId\n    });\n    if (error) throw error;\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error agregando a vistos recientemente:', error);\n    throw error;\n  }\n};\nexport const getRecentlyViewed = async () => {\n  try {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      // Si no hay usuario autenticado, obtener de localStorage\n      return JSON.parse(localStorage.getItem('recentlyViewed') || '[]');\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('recently_viewed').select(`\n        *,\n        vehicles (\n          id,\n          brand,\n          model,\n          year,\n          price,\n          price_ars,\n          kilometers,\n          images,\n          condition,\n          transmission,\n          fuel_type,\n          color,\n          type,\n          location,\n          engine,\n          power,\n          features,\n          is_featured,\n          is_promotion\n        )\n      `).eq('user_id', user.id).order('viewed_at', {\n      ascending: false\n    }).limit(10);\n    if (error) throw error;\n    return data.map(item => ({\n      ...item.vehicles,\n      viewed_at: item.viewed_at\n    }));\n  } catch (error) {\n    console.error('Error obteniendo vistos recientemente:', error);\n    return [];\n  }\n};\nexport const getFavoritesStats = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.rpc('get_favorites_stats');\n    if (error) throw error;\n    return data[0] || {\n      total_favorites: 0,\n      total_users_with_favorites: 0\n    };\n  } catch (error) {\n    console.error('Error obteniendo estadísticas de favoritos:', error);\n    return {\n      total_favorites: 0,\n      total_users_with_favorites: 0\n    };\n  }\n};\nexport const clearRecentlyViewed = async () => {\n  try {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      localStorage.removeItem('recentlyViewed');\n      return {\n        success: true\n      };\n    }\n    const {\n      error\n    } = await supabase.from('recently_viewed').delete().eq('user_id', user.id);\n    if (error) throw error;\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error limpiando vistos recientemente:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","addToFavorites","vehicleId","data","user","auth","getUser","Error","error","from","insert","user_id","id","vehicle_id","select","single","code","success","message","console","removeFromFavorites","delete","eq","getFavorites","order","ascending","map","item","vehicles","favorite_id","favorited_at","created_at","isFavorite","addToRecentlyViewed","recentlyViewed","JSON","parse","localStorage","getItem","vehicle","find","v","vehicleData","updatedRecentlyViewed","filter","slice","setItem","stringify","getRecentlyViewed","limit","viewed_at","getFavoritesStats","rpc","total_favorites","total_users_with_favorites","clearRecentlyViewed","removeItem"],"sources":["C:/Users/otero/OneDrive/Escritorio/Paginas Web/ri cars automotores/src/services/favoritesService.js"],"sourcesContent":["import { supabase } from '../supabase/config';\r\n\r\n// Servicio para manejar favoritos y vehículos vistos recientemente\r\n\r\nexport const addToFavorites = async (vehicleId) => {\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      throw new Error('Usuario no autenticado');\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('favorites')\r\n      .insert({\r\n        user_id: user.id,\r\n        vehicle_id: vehicleId\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === '23505') {\r\n        // Ya existe en favoritos\r\n        return { success: true, message: 'Ya está en favoritos' };\r\n      }\r\n      throw error;\r\n    }\r\n\r\n    return { success: true, data };\r\n  } catch (error) {\r\n    console.error('Error agregando a favoritos:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeFromFavorites = async (vehicleId) => {\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      throw new Error('Usuario no autenticado');\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('favorites')\r\n      .delete()\r\n      .eq('user_id', user.id)\r\n      .eq('vehicle_id', vehicleId);\r\n\r\n    if (error) throw error;\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error removiendo de favoritos:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getFavorites = async () => {\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      return [];\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('favorites')\r\n      .select(`\r\n        *,\r\n        vehicles (\r\n          id,\r\n          brand,\r\n          model,\r\n          year,\r\n          price,\r\n          price_ars,\r\n          kilometers,\r\n          images,\r\n          condition,\r\n          transmission,\r\n          fuel_type,\r\n          color,\r\n          type,\r\n          location,\r\n          engine,\r\n          power,\r\n          features,\r\n          is_featured,\r\n          is_promotion\r\n        )\r\n      `)\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n\r\n    return data.map(item => ({\r\n      ...item.vehicles,\r\n      favorite_id: item.id,\r\n      favorited_at: item.created_at\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error obteniendo favoritos:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const isFavorite = async (vehicleId) => {\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      return false;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('favorites')\r\n      .select('id')\r\n      .eq('user_id', user.id)\r\n      .eq('vehicle_id', vehicleId)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') {\r\n      throw error;\r\n    }\r\n\r\n    return !!data;\r\n  } catch (error) {\r\n    console.error('Error verificando favorito:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const addToRecentlyViewed = async (vehicleId) => {\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      // Si no hay usuario autenticado, guardar en localStorage\r\n      const recentlyViewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]');\r\n      const vehicle = recentlyViewed.find(v => v.id === vehicleId);\r\n      \r\n      if (!vehicle) {\r\n        // Necesitamos obtener los datos del vehículo\r\n        const { data: vehicleData } = await supabase\r\n          .from('vehicles')\r\n          .select('*')\r\n          .eq('id', vehicleId)\r\n          .single();\r\n        \r\n        if (vehicleData) {\r\n          const updatedRecentlyViewed = [\r\n            vehicleData,\r\n            ...recentlyViewed.filter(v => v.id !== vehicleId)\r\n          ].slice(0, 10); // Mantener solo los últimos 10\r\n          \r\n          localStorage.setItem('recentlyViewed', JSON.stringify(updatedRecentlyViewed));\r\n        }\r\n      }\r\n      return { success: true };\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('recently_viewed')\r\n      .insert({\r\n        user_id: user.id,\r\n        vehicle_id: vehicleId\r\n      });\r\n\r\n    if (error) throw error;\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error agregando a vistos recientemente:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getRecentlyViewed = async () => {\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      // Si no hay usuario autenticado, obtener de localStorage\r\n      return JSON.parse(localStorage.getItem('recentlyViewed') || '[]');\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('recently_viewed')\r\n      .select(`\r\n        *,\r\n        vehicles (\r\n          id,\r\n          brand,\r\n          model,\r\n          year,\r\n          price,\r\n          price_ars,\r\n          kilometers,\r\n          images,\r\n          condition,\r\n          transmission,\r\n          fuel_type,\r\n          color,\r\n          type,\r\n          location,\r\n          engine,\r\n          power,\r\n          features,\r\n          is_featured,\r\n          is_promotion\r\n        )\r\n      `)\r\n      .eq('user_id', user.id)\r\n      .order('viewed_at', { ascending: false })\r\n      .limit(10);\r\n\r\n    if (error) throw error;\r\n\r\n    return data.map(item => ({\r\n      ...item.vehicles,\r\n      viewed_at: item.viewed_at\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error obteniendo vistos recientemente:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getFavoritesStats = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .rpc('get_favorites_stats');\r\n\r\n    if (error) throw error;\r\n\r\n    return data[0] || { total_favorites: 0, total_users_with_favorites: 0 };\r\n  } catch (error) {\r\n    console.error('Error obteniendo estadísticas de favoritos:', error);\r\n    return { total_favorites: 0, total_users_with_favorites: 0 };\r\n  }\r\n};\r\n\r\nexport const clearRecentlyViewed = async () => {\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) {\r\n      localStorage.removeItem('recentlyViewed');\r\n      return { success: true };\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('recently_viewed')\r\n      .delete()\r\n      .eq('user_id', user.id);\r\n\r\n    if (error) throw error;\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error limpiando vistos recientemente:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
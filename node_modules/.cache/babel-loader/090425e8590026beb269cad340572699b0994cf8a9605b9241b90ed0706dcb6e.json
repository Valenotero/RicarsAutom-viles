{"ast":null,"code":"import { supabase } from '../supabase/config';\nimport toast from 'react-hot-toast';\n\n// Servicio de Autenticación\nexport const authService = {\n  // Registrar usuario\n  async signUp(email, password, displayName) {\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          display_name: displayName\n        }\n      }\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Iniciar sesión\n  async signIn(email, password) {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Cerrar sesión\n  async signOut() {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) {\n      throw new Error(error.message);\n    }\n  },\n  // Recuperar contraseña\n  async resetPassword(email) {\n    const {\n      error\n    } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n  },\n  // Obtener usuario actual\n  async getCurrentUser() {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    return user;\n  },\n  // Obtener perfil del usuario\n  async getUserProfile(userId) {\n    const {\n      data,\n      error\n    } = await supabase.from('profiles').select('*').eq('id', userId).single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Obtener sesión\n  async getSession() {\n    const {\n      data: {\n        session\n      }\n    } = await supabase.auth.getSession();\n    return session;\n  },\n  // Escuchar cambios de autenticación\n  onAuthStateChange(callback) {\n    return supabase.auth.onAuthStateChange(callback);\n  }\n};\n\n// Servicio de Vehículos\nexport const vehicleService = {\n  // Obtener todos los vehículos con filtros\n  async getVehicles(filters = {}) {\n    let query = supabase.from('vehicles').select('*').order('created_at', {\n      ascending: false\n    });\n\n    // Aplicar filtros\n    if (filters.brand) {\n      query = query.eq('brand', filters.brand);\n    }\n    if (filters.type) {\n      query = query.eq('type', filters.type);\n    }\n    if (filters.condition) {\n      query = query.eq('condition', filters.condition);\n    }\n    if (filters.minPrice) {\n      query = query.gte('price', filters.minPrice);\n    }\n    if (filters.maxPrice) {\n      query = query.lte('price', filters.maxPrice);\n    }\n    if (filters.minYear) {\n      query = query.gte('year', filters.minYear);\n    }\n    if (filters.maxYear) {\n      query = query.lte('year', filters.maxYear);\n    }\n    if (filters.transmission) {\n      query = query.eq('transmission', filters.transmission);\n    }\n    if (filters.fuelType) {\n      query = query.eq('fuel_type', filters.fuelType);\n    }\n    if (filters.search) {\n      query = query.or(`brand.ilike.%${filters.search}%,model.ilike.%${filters.search}%`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Obtener vehículo por ID\n  async getVehicleById(id) {\n    // Incrementar vistas\n    await supabase.rpc('increment_vehicle_views', {\n      vehicle_id: id\n    });\n    const {\n      data,\n      error\n    } = await supabase.from('vehicles').select('*').eq('id', id).single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Crear nuevo vehículo\n  async createVehicle(vehicleData) {\n    var _await$authService$ge;\n    const {\n      data,\n      error\n    } = await supabase.from('vehicles').insert([{\n      ...vehicleData,\n      created_by: (_await$authService$ge = await authService.getCurrentUser()) === null || _await$authService$ge === void 0 ? void 0 : _await$authService$ge.id\n    }]).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Actualizar vehículo\n  async updateVehicle(id, vehicleData) {\n    const {\n      data,\n      error\n    } = await supabase.from('vehicles').update(vehicleData).eq('id', id).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Eliminar vehículo\n  async deleteVehicle(id) {\n    const {\n      error\n    } = await supabase.from('vehicles').delete().eq('id', id);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return true;\n  },\n  // Obtener vehículos destacados\n  async getFeaturedVehicles(limit = 6) {\n    const {\n      data,\n      error\n    } = await supabase.from('vehicles').select('*').eq('is_featured', true).order('created_at', {\n      ascending: false\n    }).limit(limit);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Obtener vehículos en promoción\n  async getPromotionVehicles(limit = 6) {\n    const {\n      data,\n      error\n    } = await supabase.from('vehicles').select('*').eq('is_promotion', true).order('created_at', {\n      ascending: false\n    }).limit(limit);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Obtener vehículos similares\n  async getSimilarVehicles(currentVehicle, limit = 4) {\n    const {\n      data,\n      error\n    } = await supabase.from('vehicles').select('*').neq('id', currentVehicle.id).or(`brand.eq.${currentVehicle.brand},type.eq.${currentVehicle.type}`).order('created_at', {\n      ascending: false\n    }).limit(limit);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Subir imagen de vehículo\n  async uploadVehicleImage(file, vehicleId, imageIndex) {\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${vehicleId}-${imageIndex}-${Date.now()}.${fileExt}`;\n    const filePath = `vehicles/${fileName}`;\n    const {\n      data,\n      error\n    } = await supabase.storage.from('vehicle-images').upload(filePath, file);\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // Obtener URL pública\n    const {\n      data: {\n        publicUrl\n      }\n    } = supabase.storage.from('vehicle-images').getPublicUrl(filePath);\n    return publicUrl;\n  }\n};\n\n// Servicio de Estadísticas\nexport const statisticsService = {\n  // Obtener estadísticas generales\n  async getStatistics() {\n    const {\n      data: vehicles,\n      error\n    } = await supabase.from('vehicles').select('views, is_featured, is_promotion');\n    if (error) {\n      throw new Error(error.message);\n    }\n    return {\n      totalVehicles: vehicles.length,\n      totalViews: vehicles.reduce((sum, v) => sum + (v.views || 0), 0),\n      featuredVehicles: vehicles.filter(v => v.is_featured).length,\n      promotionVehicles: vehicles.filter(v => v.is_promotion).length\n    };\n  },\n  // Obtener vehículos más visitados\n  async getMostViewedVehicles(limit = 5) {\n    const {\n      data,\n      error\n    } = await supabase.from('vehicles').select('*').order('views', {\n      ascending: false\n    }).limit(limit);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  }\n};\n\n// Función SQL para incrementar vistas\n// Necesitas ejecutar esto una vez en Supabase SQL Editor:\n/*\r\nCREATE OR REPLACE FUNCTION increment_vehicle_views(vehicle_id UUID)\r\nRETURNS void AS $$\r\nBEGIN\r\n  UPDATE vehicles \r\n  SET views = views + 1 \r\n  WHERE id = vehicle_id;\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\n*/","map":{"version":3,"names":["supabase","toast","authService","signUp","email","password","displayName","data","error","auth","options","display_name","Error","message","signIn","signInWithPassword","signOut","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin","getCurrentUser","user","getUser","getUserProfile","userId","from","select","eq","single","getSession","session","onAuthStateChange","callback","vehicleService","getVehicles","filters","query","order","ascending","brand","type","condition","minPrice","gte","maxPrice","lte","minYear","maxYear","transmission","fuelType","search","or","getVehicleById","id","rpc","vehicle_id","createVehicle","vehicleData","_await$authService$ge","insert","created_by","updateVehicle","update","deleteVehicle","delete","getFeaturedVehicles","limit","getPromotionVehicles","getSimilarVehicles","currentVehicle","neq","uploadVehicleImage","file","vehicleId","imageIndex","fileExt","name","split","pop","fileName","Date","now","filePath","storage","upload","publicUrl","getPublicUrl","statisticsService","getStatistics","vehicles","totalVehicles","length","totalViews","reduce","sum","v","views","featuredVehicles","filter","is_featured","promotionVehicles","is_promotion","getMostViewedVehicles"],"sources":["C:/Users/otero/OneDrive/Escritorio/Paginas Web/ri cars automotores/src/services/supabaseService.js"],"sourcesContent":["import { supabase } from '../supabase/config'\r\nimport toast from 'react-hot-toast'\r\n\r\n// Servicio de Autenticación\r\nexport const authService = {\r\n  // Registrar usuario\r\n  async signUp(email, password, displayName) {\r\n    const { data, error } = await supabase.auth.signUp({\r\n      email,\r\n      password,\r\n      options: {\r\n        data: {\r\n          display_name: displayName\r\n        }\r\n      }\r\n    })\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Iniciar sesión\r\n  async signIn(email, password) {\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email,\r\n      password\r\n    })\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Cerrar sesión\r\n  async signOut() {\r\n    const { error } = await supabase.auth.signOut()\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n  },\r\n\r\n  // Recuperar contraseña\r\n  async resetPassword(email) {\r\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n      redirectTo: `${window.location.origin}/reset-password`\r\n    })\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n  },\r\n\r\n  // Obtener usuario actual\r\n  async getCurrentUser() {\r\n    const { data: { user } } = await supabase.auth.getUser()\r\n    return user\r\n  },\r\n\r\n  // Obtener perfil del usuario\r\n  async getUserProfile(userId) {\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single()\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Obtener sesión\r\n  async getSession() {\r\n    const { data: { session } } = await supabase.auth.getSession()\r\n    return session\r\n  },\r\n\r\n  // Escuchar cambios de autenticación\r\n  onAuthStateChange(callback) {\r\n    return supabase.auth.onAuthStateChange(callback)\r\n  }\r\n}\r\n\r\n// Servicio de Vehículos\r\nexport const vehicleService = {\r\n  // Obtener todos los vehículos con filtros\r\n  async getVehicles(filters = {}) {\r\n    let query = supabase\r\n      .from('vehicles')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n\r\n    // Aplicar filtros\r\n    if (filters.brand) {\r\n      query = query.eq('brand', filters.brand)\r\n    }\r\n    if (filters.type) {\r\n      query = query.eq('type', filters.type)\r\n    }\r\n    if (filters.condition) {\r\n      query = query.eq('condition', filters.condition)\r\n    }\r\n    if (filters.minPrice) {\r\n      query = query.gte('price', filters.minPrice)\r\n    }\r\n    if (filters.maxPrice) {\r\n      query = query.lte('price', filters.maxPrice)\r\n    }\r\n    if (filters.minYear) {\r\n      query = query.gte('year', filters.minYear)\r\n    }\r\n    if (filters.maxYear) {\r\n      query = query.lte('year', filters.maxYear)\r\n    }\r\n    if (filters.transmission) {\r\n      query = query.eq('transmission', filters.transmission)\r\n    }\r\n    if (filters.fuelType) {\r\n      query = query.eq('fuel_type', filters.fuelType)\r\n    }\r\n    if (filters.search) {\r\n      query = query.or(`brand.ilike.%${filters.search}%,model.ilike.%${filters.search}%`)\r\n    }\r\n\r\n    const { data, error } = await query\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Obtener vehículo por ID\r\n  async getVehicleById(id) {\r\n    // Incrementar vistas\r\n    await supabase.rpc('increment_vehicle_views', { vehicle_id: id })\r\n\r\n    const { data, error } = await supabase\r\n      .from('vehicles')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single()\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Crear nuevo vehículo\r\n  async createVehicle(vehicleData) {\r\n    const { data, error } = await supabase\r\n      .from('vehicles')\r\n      .insert([{\r\n        ...vehicleData,\r\n        created_by: (await authService.getCurrentUser())?.id\r\n      }])\r\n      .select()\r\n      .single()\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Actualizar vehículo\r\n  async updateVehicle(id, vehicleData) {\r\n    const { data, error } = await supabase\r\n      .from('vehicles')\r\n      .update(vehicleData)\r\n      .eq('id', id)\r\n      .select()\r\n      .single()\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Eliminar vehículo\r\n  async deleteVehicle(id) {\r\n    const { error } = await supabase\r\n      .from('vehicles')\r\n      .delete()\r\n      .eq('id', id)\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return true\r\n  },\r\n\r\n  // Obtener vehículos destacados\r\n  async getFeaturedVehicles(limit = 6) {\r\n    const { data, error } = await supabase\r\n      .from('vehicles')\r\n      .select('*')\r\n      .eq('is_featured', true)\r\n      .order('created_at', { ascending: false })\r\n      .limit(limit)\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Obtener vehículos en promoción\r\n  async getPromotionVehicles(limit = 6) {\r\n    const { data, error } = await supabase\r\n      .from('vehicles')\r\n      .select('*')\r\n      .eq('is_promotion', true)\r\n      .order('created_at', { ascending: false })\r\n      .limit(limit)\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Obtener vehículos similares\r\n  async getSimilarVehicles(currentVehicle, limit = 4) {\r\n    const { data, error } = await supabase\r\n      .from('vehicles')\r\n      .select('*')\r\n      .neq('id', currentVehicle.id)\r\n      .or(`brand.eq.${currentVehicle.brand},type.eq.${currentVehicle.type}`)\r\n      .order('created_at', { ascending: false })\r\n      .limit(limit)\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  },\r\n\r\n  // Subir imagen de vehículo\r\n  async uploadVehicleImage(file, vehicleId, imageIndex) {\r\n    const fileExt = file.name.split('.').pop()\r\n    const fileName = `${vehicleId}-${imageIndex}-${Date.now()}.${fileExt}`\r\n    const filePath = `vehicles/${fileName}`\r\n\r\n    const { data, error } = await supabase.storage\r\n      .from('vehicle-images')\r\n      .upload(filePath, file)\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    // Obtener URL pública\r\n    const { data: { publicUrl } } = supabase.storage\r\n      .from('vehicle-images')\r\n      .getPublicUrl(filePath)\r\n\r\n    return publicUrl\r\n  }\r\n}\r\n\r\n// Servicio de Estadísticas\r\nexport const statisticsService = {\r\n  // Obtener estadísticas generales\r\n  async getStatistics() {\r\n    const { data: vehicles, error } = await supabase\r\n      .from('vehicles')\r\n      .select('views, is_featured, is_promotion')\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return {\r\n      totalVehicles: vehicles.length,\r\n      totalViews: vehicles.reduce((sum, v) => sum + (v.views || 0), 0),\r\n      featuredVehicles: vehicles.filter(v => v.is_featured).length,\r\n      promotionVehicles: vehicles.filter(v => v.is_promotion).length\r\n    }\r\n  },\r\n\r\n  // Obtener vehículos más visitados\r\n  async getMostViewedVehicles(limit = 5) {\r\n    const { data, error } = await supabase\r\n      .from('vehicles')\r\n      .select('*')\r\n      .order('views', { ascending: false })\r\n      .limit(limit)\r\n\r\n    if (error) {\r\n      throw new Error(error.message)\r\n    }\r\n\r\n    return data\r\n  }\r\n}\r\n\r\n// Función SQL para incrementar vistas\r\n// Necesitas ejecutar esto una vez en Supabase SQL Editor:\r\n/*\r\nCREATE OR REPLACE FUNCTION increment_vehicle_views(vehicle_id UUID)\r\nRETURNS void AS $$\r\nBEGIN\r\n  UPDATE vehicles \r\n  SET views = views + 1 \r\n  WHERE id = vehicle_id;\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\n*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { supabase } from '../supabase/config';\n\n// Función para generar un ID único de visitante\nconst generateVisitorId = () => {\n  // Intentar obtener un ID existente del localStorage\n  let visitorId = localStorage.getItem('blog_visitor_id');\n\n  // Si no existe, crear uno nuevo\n  if (!visitorId) {\n    visitorId = 'visitor_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    localStorage.setItem('blog_visitor_id', visitorId);\n  }\n  return visitorId;\n};\n\n// Incrementar vista de un artículo de blog\nexport const incrementBlogView = async blogId => {\n  try {\n    const visitorId = generateVisitorId();\n    const {\n      data,\n      error\n    } = await supabase.rpc('increment_blog_views', {\n      blog_uuid: blogId,\n      visitor_identifier: visitorId\n    });\n    if (error) throw error;\n    return data; // Retorna true si se incrementó, false si ya existía\n  } catch (error) {\n    console.error('Error incrementando vista de blog:', error);\n    return false;\n  }\n};\n\n// Obtener estadísticas de vistas de blog\nexport const getBlogViewsStats = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.rpc('get_blog_views_stats');\n    if (error) throw error;\n    return data[0] || {\n      total_views: 0,\n      total_articles: 0,\n      avg_views_per_article: 0,\n      total_unique_visitors: 0\n    };\n  } catch (error) {\n    console.error('Error obteniendo estadísticas de blog:', error);\n    return {\n      total_views: 0,\n      total_articles: 0,\n      avg_views_per_article: 0,\n      total_unique_visitors: 0\n    };\n  }\n};\n\n// Obtener artículos de blog más vistos\nexport const getMostViewedBlogArticles = async (limit = 10) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.rpc('get_most_viewed_blog_articles', {\n      limit_count: limit\n    });\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error obteniendo artículos más vistos:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["supabase","generateVisitorId","visitorId","localStorage","getItem","Date","now","Math","random","toString","substr","setItem","incrementBlogView","blogId","data","error","rpc","blog_uuid","visitor_identifier","console","getBlogViewsStats","total_views","total_articles","avg_views_per_article","total_unique_visitors","getMostViewedBlogArticles","limit","limit_count"],"sources":["C:/Users/otero/OneDrive/Escritorio/Paginas Web/ri cars automotores/src/services/blogViewsService.js"],"sourcesContent":["import { supabase } from '../supabase/config';\r\n\r\n// Función para generar un ID único de visitante\r\nconst generateVisitorId = () => {\r\n  // Intentar obtener un ID existente del localStorage\r\n  let visitorId = localStorage.getItem('blog_visitor_id');\r\n  \r\n  // Si no existe, crear uno nuevo\r\n  if (!visitorId) {\r\n    visitorId = 'visitor_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n    localStorage.setItem('blog_visitor_id', visitorId);\r\n  }\r\n  \r\n  return visitorId;\r\n};\r\n\r\n// Incrementar vista de un artículo de blog\r\nexport const incrementBlogView = async (blogId) => {\r\n  try {\r\n    const visitorId = generateVisitorId();\r\n    \r\n    const { data, error } = await supabase\r\n      .rpc('increment_blog_views', {\r\n        blog_uuid: blogId,\r\n        visitor_identifier: visitorId\r\n      });\r\n\r\n    if (error) throw error;\r\n    \r\n    return data; // Retorna true si se incrementó, false si ya existía\r\n  } catch (error) {\r\n    console.error('Error incrementando vista de blog:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Obtener estadísticas de vistas de blog\r\nexport const getBlogViewsStats = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .rpc('get_blog_views_stats');\r\n\r\n    if (error) throw error;\r\n    return data[0] || { \r\n      total_views: 0, \r\n      total_articles: 0, \r\n      avg_views_per_article: 0, \r\n      total_unique_visitors: 0 \r\n    };\r\n  } catch (error) {\r\n    console.error('Error obteniendo estadísticas de blog:', error);\r\n    return { \r\n      total_views: 0, \r\n      total_articles: 0, \r\n      avg_views_per_article: 0, \r\n      total_unique_visitors: 0 \r\n    };\r\n  }\r\n};\r\n\r\n// Obtener artículos de blog más vistos\r\nexport const getMostViewedBlogArticles = async (limit = 10) => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .rpc('get_most_viewed_blog_articles', {\r\n        limit_count: limit\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  } catch (error) {\r\n    console.error('Error obteniendo artículos más vistos:', error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,oBAAoB;;AAE7C;AACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9B;EACA,IAAIC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;;EAEvD;EACA,IAAI,CAACF,SAAS,EAAE;IACdA,SAAS,GAAG,UAAU,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACnFP,YAAY,CAACQ,OAAO,CAAC,iBAAiB,EAAET,SAAS,CAAC;EACpD;EAEA,OAAOA,SAAS;AAClB,CAAC;;AAED;AACA,OAAO,MAAMU,iBAAiB,GAAG,MAAOC,MAAM,IAAK;EACjD,IAAI;IACF,MAAMX,SAAS,GAAGD,iBAAiB,CAAC,CAAC;IAErC,MAAM;MAAEa,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMf,QAAQ,CACnCgB,GAAG,CAAC,sBAAsB,EAAE;MAC3BC,SAAS,EAAEJ,MAAM;MACjBK,kBAAkB,EAAEhB;IACtB,CAAC,CAAC;IAEJ,IAAIa,KAAK,EAAE,MAAMA,KAAK;IAEtB,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAM;MAAEN,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMf,QAAQ,CACnCgB,GAAG,CAAC,sBAAsB,CAAC;IAE9B,IAAID,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,CAAC,CAAC,CAAC,IAAI;MAChBO,WAAW,EAAE,CAAC;MACdC,cAAc,EAAE,CAAC;MACjBC,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IACzB,CAAC;EACH,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO;MACLM,WAAW,EAAE,CAAC;MACdC,cAAc,EAAE,CAAC;MACjBC,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IACzB,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAG,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAK;EAC7D,IAAI;IACF,MAAM;MAAEZ,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMf,QAAQ,CACnCgB,GAAG,CAAC,+BAA+B,EAAE;MACpCW,WAAW,EAAED;IACf,CAAC,CAAC;IAEJ,IAAIX,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,IAAI,EAAE;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}